import numpy as np
from sympy.solvers import solve
from sympy import Symbol
from scipy.integrate import odeint
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

# # doi:10.1088/1757-899X/1226/1/012113
# side_hexagon = 0.53  # [m] - Side of the hexagon
# height_hexagon = 0.14  # [m] - Height of the hexagon
# area_top = 3/2*3**(1/2)*side_hexagon**2

# area_total = area_top + 6*height_hexagon*side_hexagon  # [m^2] - Total surface area of the battery
# area_top = 3/2*3**(1/2)*side_hexagon**2
# mass_battery = 9.112  # [kg] - Mass of the battery
# capacity_battery = 1100
# emissivity_battery = 0.01 # [-] - Emissivity of the battery
# doi:10.1088/1757-899X/1226/1/012113
l_battery = 0.189  # [m] - Length of the battery
w_battery = 0.189  # [m] - Width of the battery
h_battery = 0.14   # [m] - Height of the battery
area_total = (h_battery*w_battery*2 + 2*l_battery*w_battery + 2*h_battery*l_battery)
area_top = l_battery*w_battery
mass_battery = 10.25  # [kg] - Mass of the battery
capacity_battery = 1100
emissivity_battery = 0.1

# Insulator properties
thermal_conductivity = 0.035  # [W/m*K] - Thermal conductivity of the insulator (Cork)
thickness_insulator = 0.01  # [m] - Thickness of the insulator
thermal_conductivity_air = 0.0209  # [W/m*K] - Thermal conductivity of the insulator (Cork)
thickness_insulator_air = 0.015  # [m] - Thickness of the insulator

l_insulator = l_battery + 2*thickness_insulator_air + 2*thickness_insulator
w_insulator = w_battery + 2*thickness_insulator_air + 2*thickness_insulator
h_insulator = h_battery + 2*thickness_insulator_air + 2*thickness_insulator
density_insulator = 110  # [kg/m^3] - Density of the atmosphere
volume_insulator = 2*((l_insulator)*(w_insulator) + (h_insulator-2*thickness_insulator)*w_insulator + (l_insulator-2*thickness_insulator)*(h_insulator-2*thickness_insulator))*thickness_insulator  # [m^3] - Volume of the insulator
mass_insulator = density_insulator*volume_insulator  # [kg] - Mass of the insulator
print(mass_insulator)

heat_balance_mintemp = {
    'temperature_atmosphere': np.array([185.48171736, 185.31871025, 185.15400773, 184.98781683,
       184.82034458, 184.65179804, 184.48238422, 184.31231019,
       184.14178296, 183.9710096 , 183.80019712, 183.62955258,
       183.459283  , 183.28959544, 183.12069692, 182.9527945 ,
       182.7860952 , 182.62080606, 182.45713414, 182.29528645,
       182.13547005, 181.97789198, 181.82275926, 181.67027895,
       181.52065807, 181.37401639, 181.2301245 , 181.08866573,
       180.94932338, 180.81178079, 180.67572125, 180.5408281 ,
       180.40678465, 180.27327421, 180.1399801 , 180.00658564,
       179.87277414, 179.73832792, 179.60342522, 179.4683433 ,
       179.3333594 , 179.19875076, 179.06479463, 178.93176826,
       178.79994888, 178.66961376, 178.54104013, 178.41450524,
       178.29028633, 178.16857001, 178.04918036, 177.9318508 ,
       177.81631478, 177.70230571, 177.58955705, 177.47780221,
       177.36677463, 177.25620775, 177.14583499, 177.0353898 ,
       176.9246056 , 176.81341847, 176.70257499, 176.59302439,
       176.48571591, 176.38159877, 176.28162219, 176.18673542,
       176.09788767, 176.01602817, 175.94210615, 175.87707085,
       175.82187148, 175.77711562, 175.74204425, 175.71555668,
       175.69655224, 175.68393023, 175.67658998, 175.6734308 ,
       175.67335202, 175.67525295, 175.67803291, 175.68059122,
       175.68182719, 175.68156192, 175.68330354, 175.69148198,
       175.71052715, 175.74486895, 175.79893731, 175.87716214,
       175.98397335, 176.12380086, 176.30107458, 176.52022443,
       176.78568031, 177.10024639, 177.46022378, 177.86028786,
       178.29511399, 178.75937754, 179.24775388, 179.75491836,
       180.27554636, 180.80431324, 181.33589438, 181.86496513,
       182.38620086, 182.89533469, 183.39233076, 183.87821097,
       184.3539972 , 184.82071135, 185.2793753 , 185.73101096,
       186.17664022, 186.61728495, 187.05396707, 187.48770846,
       187.91953101, 188.35030062, 188.78025921, 189.2094927 ,
       189.63808703, 190.06612811, 190.49370187, 190.92089423,
       191.34779113, 191.77447848, 192.20104221, 192.62756824,
       193.0541425 , 193.48063447, 193.90604778, 194.32916964,
       194.74878724, 195.16368777, 195.57265844, 195.97448643,
       196.36795895, 196.75186318, 197.12498633, 197.48611559,
       197.83403815, 198.16799457, 198.48903886, 198.79867841,
       199.09842059, 199.38977276, 199.67424232, 199.95333663,
       200.22856307, 200.50142902, 200.77344185, 201.04610893,
       201.32093765, 201.59888479, 201.87870475, 202.15860134,
       202.43677839, 202.71143969, 202.98078908, 203.24303035,
       203.49636733, 203.73900382, 203.96914364, 204.18499061,
       204.38474853, 204.56723121, 204.7336924 , 204.88599585,
       205.02600528, 205.15558445, 205.27659709, 205.39090695,
       205.50037777, 205.60687328, 205.71225724, 205.81839337,
       205.92714542, 206.03959326, 206.15368129, 206.26657001,
       206.37541996, 206.47739164, 206.56964558, 206.64934231,
       206.71364233, 206.75970616, 206.78469434, 206.78576737,
       206.76008578, 206.70580352, 206.62504831, 206.52094128,
       206.3966036 , 206.2551564 , 206.09972083, 205.93341804,
       205.75936919, 205.5806954 , 205.40051785, 205.22195766,
       205.04813599, 204.88128543, 204.72008437, 204.56232265,
       204.4057901 , 204.24827654, 204.08757183, 203.92146578,
       203.74774824, 203.56420904, 203.36863801, 203.15882499,
       202.93255981, 202.68833546, 202.42745754, 202.15193482,
       201.86377606, 201.56499002, 201.25758546, 200.94357114,
       200.62495582, 200.30374826, 199.98195722, 199.66159147,
       199.34465977, 199.032813  , 198.72627055, 198.42489395,
       198.12854473, 197.83708439, 197.55037446, 197.26827647,
       196.99065192, 196.71736236, 196.44826929, 196.18323423,
       195.92211871, 195.66474364, 195.41076749, 195.15980814,
       194.91148343, 194.66541123, 194.42120942, 194.17849585,
       193.93688839, 193.6960049 , 193.45546324, 193.21488129,
       192.9738769 , 192.7322088 , 192.49019911, 192.24831083,
       192.00700694, 191.76675044, 191.5280043 , 191.29123153,
       191.0568951 , 190.825458  , 190.59738323, 190.37313377,
       190.15317261, 189.93782655, 189.72687764, 189.51997176,
       189.31675477, 189.11687253, 188.91997092, 188.7256958 ,
       188.53369303, 188.3436085 , 188.15508806, 187.96777757,
       187.78132292, 187.59536996, 187.40956457, 187.2235526 ,
       187.03697993, 186.84949243, 186.66073596, 186.47035638,
       186.27799957, 186.0833114 , 185.88593773, 185.68552442]),  # [K] - Atmospheric temperature
    'irradiance_sun': np.array([0.00000000e+00, 3.19472265e-04, 5.55603940e-04, 7.15971441e-04,
       8.08151185e-04, 8.39719591e-04, 8.18253075e-04, 7.51328055e-04,
       6.46520948e-04, 5.11408172e-04, 3.53566143e-04, 1.80571280e-04,
       1.06107493e-19, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 4.02812856e-04, 8.58660634e-04, 1.32966125e-03,
       1.77793261e-03, 2.16559263e-03, 2.45475922e-03, 2.60755031e-03,
       2.58608379e-03, 2.35247759e-03, 1.86884962e-03, 1.09731778e-03,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       9.24743971e-19, 5.31990772e-03, 1.14656449e-02, 1.78992860e-02,
       2.40829053e-02, 2.94785772e-02, 3.35483761e-02, 3.57543763e-02,
       3.55586521e-02, 3.24232781e-02, 2.58103285e-02, 1.51818777e-02,
       8.89420853e-18, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       2.21282782e-03, 8.80365350e-02, 2.52352048e-01, 5.54557315e-01,
       1.05405029e+00, 1.81022891e+00, 2.88249114e+00, 4.33023492e+00,
       6.21285821e+00, 8.58975894e+00, 1.15203351e+01, 1.50639846e+01,
       1.92801054e+01, 2.42061339e+01, 2.97916609e+01, 3.59643156e+01,
       4.26517270e+01, 4.97815243e+01, 5.72813369e+01, 6.50787937e+01,
       7.31015241e+01, 8.12771572e+01, 8.95333221e+01, 9.77976481e+01,
       1.05997764e+02, 1.14073567e+02, 1.22014023e+02, 1.29820366e+02,
       1.37493828e+02, 1.45035645e+02, 1.52447048e+02, 1.59729272e+02,
       1.66883551e+02, 1.73911118e+02, 1.80813206e+02, 1.87591049e+02,
       1.94245880e+02, 2.00777723e+02, 2.07181754e+02, 2.13451939e+02,
       2.19582244e+02, 2.25566636e+02, 2.31399081e+02, 2.37073544e+02,
       2.42583992e+02, 2.47924391e+02, 2.53088706e+02, 2.58070904e+02,
       2.62864952e+02, 2.67466046e+02, 2.71874314e+02, 2.76091112e+02,
       2.80117800e+02, 2.83955735e+02, 2.87606274e+02, 2.91070776e+02,
       2.94350600e+02, 2.97447102e+02, 3.00361641e+02, 3.03095575e+02,
       3.05650261e+02, 3.08026065e+02, 3.10219378e+02, 3.12225598e+02,
       3.14040123e+02, 3.15658351e+02, 3.17075680e+02, 3.18287508e+02,
       3.19289234e+02, 3.20076255e+02, 3.20643970e+02, 3.20987776e+02,
       3.21103073e+02, 3.20986911e+02, 3.20642964e+02, 3.20076559e+02,
       3.19293020e+02, 3.18297676e+02, 3.17095853e+02, 3.15692876e+02,
       3.14094074e+02, 3.12304772e+02, 3.10330298e+02, 3.08175977e+02,
       3.05847136e+02, 3.03347511e+02, 3.00674477e+02, 2.97823816e+02,
       2.94791312e+02, 2.91572748e+02, 2.88163907e+02, 2.84560573e+02,
       2.80758529e+02, 2.76753559e+02, 2.72541446e+02, 2.68117972e+02,
       2.63478923e+02, 2.58623052e+02, 2.53561006e+02, 2.48306401e+02,
       2.42872857e+02, 2.37273991e+02, 2.31523420e+02, 2.25634762e+02,
       2.19621634e+02, 2.13497655e+02, 2.07276443e+02, 2.00971614e+02,
       1.94596787e+02, 1.88161036e+02, 1.81655263e+02, 1.75065825e+02,
       1.68379081e+02, 1.61581389e+02, 1.54659107e+02, 1.47598593e+02,
       1.40386206e+02, 1.33008303e+02, 1.25451242e+02, 1.17701383e+02,
       1.09745082e+02, 1.01584596e+02, 9.32857695e+01, 8.49303438e+01,
       7.66000613e+01, 6.83766642e+01, 6.03418944e+01, 5.25774940e+01,
       4.51652051e+01, 3.81867697e+01, 3.17239299e+01, 2.58584277e+01,
       2.06720051e+01, 1.62225872e+01, 1.24728307e+01, 9.36157520e+00,
       6.82766037e+00, 4.80992585e+00, 3.24721130e+00, 2.07835635e+00,
       1.24220065e+00, 6.77583863e-01, 3.23345623e-01, 1.18325580e-01,
       1.36338227e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 2.14450792e-02, 3.64582400e-02, 4.57993262e-02,
       5.02281819e-02, 5.05046510e-02, 4.73885773e-02, 4.16398049e-02,
       3.40181778e-02, 2.52835397e-02, 1.61957348e-02, 7.51460690e-03,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 1.55001030e-03, 2.63983342e-03, 3.32297951e-03,
       3.65295868e-03, 3.68328110e-03, 3.46745688e-03, 3.05899616e-03,
       2.51140910e-03, 1.87820581e-03, 1.21289644e-03, 5.68991123e-04,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       3.92262383e-19, 2.55064986e-04, 4.99427945e-04, 7.22386849e-04,
       9.13239671e-04, 1.06128438e-03, 1.15581896e-03, 1.18614137e-03,
       1.14154959e-03, 1.01134159e-03, 7.84815342e-04, 4.51268822e-04]),
    'absorptivity': 0.2,  # [-] - Absorptance of the battery
    'f_sr': 1,  # [-] - View factor for solar radiation
    'area_top': area_top,  # [m^2] - Top surface area of the battery

    'albedo': 0.4,  # [-] - Albedo of Mars

    'temperature_effective_mars': 209.8,  # [K] - Effective temperature for radiation of black body of Mars
    'emissivity_mars': 0.65,  # [-]-  Emissivity of Mars
    'stefan_boltzmann_constant': 5.6704e-8,  # [W/m^2*K^4] - Stefan-Boltzmann constant

    # battery properties
    'heat_rate_internal': 25,  # [W] - Heat from internal sources

    'coefficient_convection': 1,  # [W/m^2*K] - Convection coefficient
    'area_total': area_total,  # [m^2] - Total surface area of the battery
    'f_re': 1,  # [-] - View factor for emitted radiation
    'emissivity_battery': emissivity_battery,  # [-] - Emissivity of the battery
    'battery_mass': mass_battery,  # [kg] - Mass of the battery
    'battery_heat_capacity': capacity_battery,  # [J/kg*K] - Heat capacity of the battery

    # Insulator properties
    'thermal_conductivity': thermal_conductivity,  # [W/m*K] - Thermal conductivity of the insulator (Cork)
    'thickness_insulator': thickness_insulator,  # [m] - Thickness of the insulator
    'thermal_conductivity_air': thermal_conductivity_air,  # [W/m*K] - Thermal conductivity of the insulator (Cork)
    'thickness_insulator_air': thickness_insulator_air,  # [m] - Thickness of the insulator
}

heat_balance_maxtemp = {
    'temperature_atmosphere': np.array([225.07991434, 224.86182942, 224.64078064, 224.41711538,
       224.19118099, 223.96332486, 223.73389433, 223.50323679,
       223.2716996 , 223.03963013, 222.80737574, 222.5752838 ,
       222.34370168, 222.11297675, 221.88345637, 221.65548792,
       221.42941875, 221.20559624, 220.98436775, 220.76608065,
       220.55108232, 220.3397201 , 220.13234138, 219.92929352,
       219.73092389, 219.53743365, 219.34843913, 219.16341044,
       218.98181772, 218.80313109, 218.62682067, 218.45235658,
       218.27920894, 218.10684789, 217.93474353, 217.762366  ,
       217.58918542, 217.41483628, 217.23961051, 217.06396446,
       216.88835441, 216.7132367 , 216.53906764, 216.36630354,
       216.19540072, 216.02681549, 215.86100417, 215.69842307,
       215.53952852, 215.384634  , 215.23348176, 215.08567122,
       214.94080179, 214.7984729 , 214.65828397, 214.51983441,
       214.38272366, 214.24655112, 214.11091622, 213.97541838,
       213.83965702, 213.70400153, 213.57190121, 213.44757534,
       213.33524318, 213.23912401, 213.16343709, 213.1124017 ,
       213.09023711, 213.1011626 , 213.14939742, 213.23916086,
       213.37467219, 213.55858584, 213.78729698, 214.05563592,
       214.35843298, 214.6905185 , 215.04672279, 215.42187617,
       215.81080897, 216.20835151, 216.60933412, 217.00858711,
       217.40094082, 217.78285689, 218.15732235, 218.52895554,
       218.9023748 , 219.28219849, 219.67304495, 220.07953252,
       220.50627957, 220.95790443, 221.43902546, 221.954261  ,
       222.50822939, 223.10401527, 223.73856834, 224.4073046 ,
       225.10564004, 225.82899065, 226.57277242, 227.33240134,
       228.1032934 , 228.8808646 , 229.66053092, 230.43770836,
       231.2078129 , 231.96704251, 232.71472305, 233.45096232,
       234.17586817, 234.88954841, 235.59211087, 236.28366336,
       236.96431372, 237.63416978, 238.29333934, 238.94193024,
       239.5800503 , 240.2079704 , 240.82661369, 241.43706635,
       242.04041459, 242.63774459, 243.23014255, 243.81869468,
       244.40448715, 244.98860618, 245.57213795, 246.15616867,
       246.74178452, 247.32965655, 247.91879519, 248.50779572,
       249.09525342, 249.67976357, 250.25992143, 250.8343223 ,
       251.40156146, 251.96023416, 252.50893571, 253.04626137,
       253.57080643, 254.0816484 , 254.5797938 , 255.0667314 ,
       255.54394994, 256.01293819, 256.4751849 , 256.93217884,
       257.38540877, 257.83636343, 258.28653161, 258.73740204,
       259.19046349, 259.64657734, 260.10409545, 260.56074229,
       261.01424235, 261.4623201 , 261.90270002, 262.33310659,
       262.75126429, 263.15489759, 263.54173097, 263.90948891,
       264.25589589, 264.57946308, 264.88184837, 265.16549635,
       265.43285163, 265.68635877, 265.92846239, 266.16160705,
       266.38823736, 266.6107979 , 266.83173326, 267.05348804,
       267.27850681, 267.50805786, 267.73870417, 267.96583241,
       268.18482926, 268.39108139, 268.57997547, 268.74689817,
       268.88723616, 268.99637613, 269.06970473, 269.10260864,
       269.09047453, 269.03033463, 268.92580343, 268.78214094,
       268.60460721, 268.39846226, 268.16896613, 267.92137885,
       267.66096046, 267.39297098, 267.12267045, 266.8553189 ,
       266.59617636, 266.34857415, 266.10812871, 265.86852773,
       265.62345894, 265.36661005, 265.09166877, 264.79232282,
       264.4622599 , 264.09516773, 263.68473402, 263.2246465 ,
       262.70859285, 262.13243349, 261.50071951, 260.82017469,
       260.09752282, 259.33948766, 258.55279301, 257.74416264,
       256.92032032, 256.08798986, 255.25389501, 254.42475956,
       253.6073073 , 252.80713587, 252.0253384 , 251.2618819 ,
       250.51673337, 249.78985981, 249.08122822, 248.39080561,
       247.71855898, 247.06445533, 246.42846166, 245.81054498,
       245.21067229, 244.62850789, 244.06250532, 243.51081541,
       242.971589  , 242.44297693, 241.92313002, 241.41019912,
       240.90233506, 240.39768867, 239.8944108 , 239.39065227,
       238.88456392, 238.37492021, 237.86299006, 237.35066601,
       236.83984058, 236.33240633, 235.83025579, 235.3352815 ,
       234.84937599, 234.37443181, 233.91234149, 233.46499758,
       233.0342926 , 232.62157442, 232.22601214, 231.84623018,
       231.48085297, 231.12850492, 230.78781046, 230.457394  ,
       230.13587998, 229.82189281, 229.51405692, 229.21099672,
       228.91133663, 228.61370109, 228.31671451, 228.01900131,
       227.71918592, 227.41589275, 227.10774623, 226.79337078,
       226.47139083, 226.14043078, 225.79911507, 225.44606812]),  # [K] - Atmospheric temperature
    'irradiance_sun': np.array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.81641605e-17, 2.26016941e-02, 4.42550653e-02, 6.40117909e-02,
       8.09235480e-02, 9.40420138e-02, 1.02418865e-01, 1.05105780e-01,
       1.01154435e-01, 8.96165073e-02, 6.95436741e-02, 3.99876126e-02,
       6.07534012e-18, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       9.02217163e-17, 1.79074961e-01, 3.85651283e-01, 6.01710834e-01,
       8.09235480e-01, 9.90207086e-01, 1.12660752e+00, 1.20041865e+00,
       1.19362233e+00, 1.08820045e+00, 8.66134850e-01, 5.09407413e-01,
       3.15094488e-17, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 2.52576441e+00, 5.68539610e+00, 9.47548943e+00,
       1.38926387e+01, 1.89334384e+01, 2.45944827e+01, 3.08723660e+01,
       3.77636828e+01, 4.52650272e+01, 5.33729937e+01, 6.20841766e+01,
       7.13951703e+01, 8.12916863e+01, 9.17159052e+01, 1.02599125e+02,
       1.13872643e+02, 1.25467757e+02, 1.37315765e+02, 1.49347964e+02,
       1.61495653e+02, 1.73690130e+02, 1.85862691e+02, 1.97944635e+02,
       2.09867259e+02, 2.21577056e+02, 2.33081293e+02, 2.44402432e+02,
       2.55562936e+02, 2.66585266e+02, 2.77491885e+02, 2.88305254e+02,
       2.99047836e+02, 3.09742093e+02, 3.20410487e+02, 3.31075479e+02,
       3.41759532e+02, 3.52477707e+02, 3.63215458e+02, 3.73950839e+02,
       3.84661905e+02, 3.95326708e+02, 4.05923302e+02, 4.16429741e+02,
       4.26824078e+02, 4.37084368e+02, 4.47188663e+02, 4.57115018e+02,
       4.66841486e+02, 4.76349022e+02, 4.85630182e+02, 4.94680426e+02,
       5.03495212e+02, 5.12069998e+02, 5.20400241e+02, 5.28481402e+02,
       5.36308937e+02, 5.43878306e+02, 5.51184966e+02, 5.58224375e+02,
       5.64991993e+02, 5.71484626e+02, 5.77704472e+02, 5.83655081e+02,
       5.89340000e+02, 5.94762776e+02, 5.99926957e+02, 6.04836091e+02,
       6.09493726e+02, 6.13903410e+02, 6.18068691e+02, 6.21993115e+02,
       6.25680232e+02, 6.29131283e+02, 6.32338290e+02, 6.35290970e+02,
       6.37979039e+02, 6.40392212e+02, 6.42520208e+02, 6.44352742e+02,
       6.45879529e+02, 6.47090288e+02, 6.47974734e+02, 6.48522583e+02,
       6.48723552e+02, 6.48570986e+02, 6.48072747e+02, 6.47240326e+02,
       6.46085214e+02, 6.44618902e+02, 6.42852881e+02, 6.40798641e+02,
       6.38467673e+02, 6.35871469e+02, 6.33021520e+02, 6.29929315e+02,
       6.26606347e+02, 6.23060855e+02, 6.19288077e+02, 6.15280002e+02,
       6.11028616e+02, 6.06525906e+02, 6.01763861e+02, 5.96734468e+02,
       5.91429714e+02, 5.85841587e+02, 5.79962074e+02, 5.73783162e+02,
       5.67296839e+02, 5.60498819e+02, 5.53399720e+02, 5.46013884e+02,
       5.38355656e+02, 5.30439379e+02, 5.22279398e+02, 5.13890056e+02,
       5.05285696e+02, 4.96480663e+02, 4.87489299e+02, 4.78325950e+02,
       4.69004958e+02, 4.59538582e+02, 4.49930731e+02, 4.40183231e+02,
       4.30297906e+02, 4.20276581e+02, 4.10121081e+02, 3.99833230e+02,
       3.89414852e+02, 3.78867774e+02, 3.68193818e+02, 3.57394810e+02,
       3.46472575e+02, 3.35429671e+02, 3.24271596e+02, 3.13004583e+02,
       3.01634862e+02, 2.90168665e+02, 2.78612226e+02, 2.66971775e+02,
       2.55253544e+02, 2.43463766e+02, 2.31608672e+02, 2.19694494e+02,
       2.07727464e+02, 1.95720093e+02, 1.83710009e+02, 1.71741116e+02,
       1.59857322e+02, 1.48102533e+02, 1.36520655e+02, 1.25155594e+02,
       1.14051256e+02, 1.03251548e+02, 9.28003746e+01, 8.27416434e+01,
       7.31192600e+01, 6.39726935e+01, 5.53236635e+01, 4.71894524e+01,
       3.95873426e+01, 3.25346165e+01, 2.60485566e+01, 2.01464451e+01,
       1.48455646e+01, 1.01631975e+01, 6.11662603e+00, 2.72313274e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 5.49670943e-01, 9.34594094e-01, 1.17421174e+00,
       1.28796617e+00, 1.29529966e+00, 1.21565451e+00, 1.06847299e+00,
       8.73197402e-01, 6.49270021e-01, 4.16133137e-01, 1.93229034e-01,
       1.74872288e-16, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       9.24007043e-17, 4.31482310e-02, 7.50404017e-02, 9.66997904e-02,
       1.09149675e-01, 1.13413334e-01, 1.10514046e-01, 1.01475089e-01,
       8.73197402e-02, 6.90712789e-02, 4.77529829e-02, 2.43881306e-02,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]),  # [W/m^2] - Solar irradiance
    'absorptivity': 0.2,  # [-] - Absorptance of the battery
    'f_sr': 1,  # [-] - View factor for solar radiation
    'area_top': area_top,  # [m^2] - Top surface area of the battery

    'albedo': 0.4,  # [-] - Albedo of Mars

    'temperature_effective_mars': 209.8,  # [K] - Effective temperature for radiation of black body of Mars
    'emissivity_mars': 0.65,  # [-]-  Emissivity of Mars
    'stefan_boltzmann_constant': 5.6704e-8,  # [W/m^2*K^4] - Stefan-Boltzmann constant

        # battery properties
    'heat_rate_internal': 10,  # [W] - Heat from internal sources

    'coefficient_convection': 1,  # [W/m^2*K] - Convection coefficient
    'area_total': area_total,  # [m^2] - Total surface area of the battery
    'f_re': 1,  # [-] - View factor for emitted radiation
    'emissivity_battery': emissivity_battery,  # [-] - Emissivity of the battery
    'battery_mass': mass_battery,  # [kg] - Mass of the battery
    'battery_heat_capacity': capacity_battery,  # [J/kg*K] - Heat capacity of the battery

    # Insulator properties
    'thermal_conductivity': thermal_conductivity,  # [W/m*K] - Thermal conductivity of the insulator (Cork)
    'thickness_insulator': thickness_insulator,  # [m] - Thickness of the insulator
    'thermal_conductivity_air': thermal_conductivity_air,  # [W/m*K] - Thermal conductivity of the insulator (Cork)
    'thickness_insulator_air': thickness_insulator_air,  # [m] - Thickness of the insulator
}
heat_balance_maxirradiance = {
    'temperature_atmosphere': np.array([222.37640843, 222.1884228 , 222.00030362, 221.81206104,
       221.62370524, 221.43524637, 221.2466946 , 221.05806009,
       220.869353  , 220.6805835 , 220.49176176, 220.30289792,
       220.11400217, 219.92508465, 219.73615554, 219.547225  ,
       219.35830318, 219.16940026, 218.9805264 , 218.79169176,
       218.6029065 , 218.41418078, 218.22552478, 218.03694865,
       217.84846256, 217.66007426, 217.47178187, 217.28358111,
       217.09546768, 216.9074373 , 216.71948568, 216.53160854,
       216.34380157, 216.15606051, 215.96838105, 215.78075892,
       215.59318982, 215.40572398, 215.21862966, 215.03222965,
       214.84684674, 214.66280371, 214.48042333, 214.3000284 ,
       214.12194169, 213.94648599, 213.77398407, 213.60475873,
       213.43913275, 213.27731323, 213.11904457, 212.96395552,
       212.81167479, 212.66183112, 212.51405324, 212.36796988,
       212.22320976, 212.07940163, 211.9361742 , 211.79315621,
       211.64997639, 211.50714988, 211.36873752, 211.23968654,
       211.12494419, 211.02945772, 210.95817436, 210.91604136,
       210.90800597, 210.93901542, 211.01401697, 211.13795785,
       211.31578531, 211.55060549, 211.83816014, 212.1723499 ,
       212.54707542, 212.95623735, 213.39373633, 213.85347301,
       214.32934803, 214.81526204, 215.30511568, 215.7928096 ,
       216.27224445, 216.73896551, 217.19509656, 217.64440604,
       218.09066237, 218.53763399, 218.98908932, 219.44879679,
       219.92052483, 220.40804187, 220.91511632, 221.44551663,
       222.00301121, 222.59019594, 223.20497643, 223.84408574,
       224.50425691, 225.18222301, 225.87471708, 226.57847218,
       227.29022137, 228.00669769, 228.72463421, 229.44076397,
       230.15182003, 230.85501899, 231.54951169, 232.23493248,
       232.91091576, 233.57709589, 234.23310725, 234.87858422,
       235.51316117, 236.13647247, 236.74815251, 237.34783565,
       237.93515627, 238.51003247, 239.0735172 , 239.62694713,
       240.17165894, 240.70898929, 241.24027486, 241.76685232,
       242.29005835, 242.81122962, 243.33170279, 243.85281454,
       244.37590155, 244.90184058, 245.42966878, 245.95796341,
       246.48530171, 247.01026094, 247.53141833, 248.04735115,
       248.55663664, 249.05785204, 249.54957462, 250.03038162,
       250.49885028, 250.95403433, 251.39689337, 251.82886347,
       252.2513807 , 252.66588114, 253.07380086, 253.47657593,
       253.87564243, 254.27243642, 254.66839397, 255.06495117,
       255.46354409, 255.86504962, 256.26810804, 256.67080045,
       257.07120795, 257.46741163, 257.8574926 , 258.23953196,
       258.61161081, 258.97181025, 259.31821138, 259.6488953 ,
       259.96194311, 260.25609392, 260.53271889, 260.79384717,
       261.04150794, 261.27773036, 261.50454359, 261.7239768 ,
       261.93805914, 262.14881979, 262.3582879 , 262.56849264,
       262.78146318, 262.9983145 , 263.21650488, 263.43257842,
       263.64307922, 263.84455138, 264.033539  , 264.20658618,
       264.36023702, 264.49103562, 264.59552609, 264.67025251,
       264.711759  , 264.71780112, 264.69098032, 264.63510951,
       264.55400161, 264.45146954, 264.33132621, 264.19738454,
       264.05345744, 263.90335782, 263.75089862, 263.59989273,
       263.45415309, 263.31563399, 263.17885539, 263.0364786 ,
       262.88116498, 262.70557584, 262.50237252, 262.26421637,
       261.9837687 , 261.65369087, 261.26664419, 260.81529002,
       260.29228967, 259.69295364, 259.02318904, 258.29155211,
       257.50659912, 256.67688633, 255.81096999, 254.91740636,
       254.0047517 , 253.08156227, 252.15639432, 251.23780412,
       250.33434791, 249.45318793, 248.59591025, 247.76270691,
       246.95376997, 246.16929146, 245.40946344, 244.67447794,
       243.96452701, 243.2798027 , 242.62049704, 241.98680209,
       241.37890989, 240.79652666, 240.23741533, 239.69885298,
       239.17811673, 238.67248367, 238.17923091, 237.69563554,
       237.21897466, 236.74652537, 236.27556478, 235.80336997,
       235.32721806, 234.84520268, 234.35868362, 233.86983721,
       233.38083978, 232.89386766, 232.41109717, 231.93470466,
       231.46686644, 231.00975885, 230.56555822, 230.13644087,
       229.72458314, 229.33156096, 228.95654865, 228.59812014,
       228.25484936, 227.92531025, 227.60807672, 227.30172272,
       227.00482216, 226.71594899, 226.43367711, 226.15658048,
       225.88323301, 225.61220863, 225.34208128, 225.07142488,
       224.79881336, 224.52282065, 224.24202068, 223.95498738,
       223.66029468, 223.35651651, 223.04222678, 222.71599945]),
    'irradiance_sun': np.array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 1.31920927e-02, 2.58306710e-02, 3.73622206e-02,
       4.72332270e-02, 5.48901760e-02, 5.97795530e-02, 6.13478437e-02,
       5.90415338e-02, 5.23071089e-02, 4.05910545e-02, 2.33398563e-02,
       6.03497027e-18, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       2.51397486e-17, 1.04521965e-01, 2.25095848e-01, 3.51204874e-01,
       4.72332270e-01, 5.77961265e-01, 6.57575083e-01, 7.00656952e-01,
       6.96690099e-01, 6.35157750e-01, 5.05543133e-01, 2.97329474e-01,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.06171265e-15, 1.47983139e+00, 3.36323897e+00, 5.68183725e+00,
       8.46724076e+00, 1.17510640e+01, 1.55649215e+01, 1.99404279e+01,
       2.49091975e+01, 3.05028450e+01, 3.67529848e+01, 4.36912315e+01,
       5.13491995e+01, 5.97390881e+01, 6.87954346e+01, 7.84333610e+01,
       8.85679893e+01, 9.91144415e+01, 1.09987840e+02, 1.21103306e+02,
       1.32375961e+02, 1.43720929e+02, 1.55053331e+02, 1.66288288e+02,
       1.77340923e+02, 1.88146974e+02, 1.98724642e+02, 2.09112743e+02,
       2.19350095e+02, 2.29475514e+02, 2.39527818e+02, 2.49545822e+02,
       2.59568345e+02, 2.69634202e+02, 2.79782211e+02, 2.90051189e+02,
       3.00479952e+02, 3.11094471e+02, 3.21869326e+02, 3.32766250e+02,
       3.43746978e+02, 3.54773243e+02, 3.65806779e+02, 3.76809319e+02,
       3.87742598e+02, 3.98568348e+02, 4.09248304e+02, 4.19744200e+02,
       4.30017768e+02, 4.40036932e+02, 4.49794374e+02, 4.59288963e+02,
       4.68519571e+02, 4.77485068e+02, 4.86184324e+02, 4.94616211e+02,
       5.02779599e+02, 5.10673358e+02, 5.18296360e+02, 5.25647474e+02,
       5.32725571e+02, 5.39530268e+02, 5.46064165e+02, 5.52330606e+02,
       5.58332937e+02, 5.64074504e+02, 5.69558651e+02, 5.74788725e+02,
       5.79768071e+02, 5.84500033e+02, 5.88987958e+02, 5.93235190e+02,
       5.97245076e+02, 6.01018103e+02, 6.04543335e+02, 6.07806978e+02,
       6.10795238e+02, 6.13494320e+02, 6.15890431e+02, 6.17969778e+02,
       6.19718565e+02, 6.21122999e+02, 6.22169287e+02, 6.22843634e+02,
       6.23132246e+02, 6.23026295e+02, 6.22536812e+02, 6.21679794e+02,
       6.20471237e+02, 6.18927139e+02, 6.17063497e+02, 6.14896306e+02,
       6.12441564e+02, 6.09715268e+02, 6.06733413e+02, 6.03511998e+02,
       6.00067019e+02, 5.96409812e+02, 5.92533075e+02, 5.88424843e+02,
       5.84073153e+02, 5.79466043e+02, 5.74591549e+02, 5.69437706e+02,
       5.63992553e+02, 5.58244126e+02, 5.52180460e+02, 5.45789594e+02,
       5.39059563e+02, 5.31983444e+02, 5.24574468e+02, 5.16850907e+02,
       5.08831034e+02, 5.00533119e+02, 4.91975435e+02, 4.83176252e+02,
       4.74153843e+02, 4.64926479e+02, 4.55512431e+02, 4.45929972e+02,
       4.36197373e+02, 4.26330943e+02, 4.16339147e+02, 4.06228483e+02,
       3.96005454e+02, 3.85676560e+02, 3.75248302e+02, 3.64727182e+02,
       3.54119700e+02, 3.43432356e+02, 3.32671653e+02, 3.21844091e+02,
       3.10956171e+02, 3.00012531e+02, 2.89010359e+02, 2.77944980e+02,
       2.66811719e+02, 2.55605901e+02, 2.44322851e+02, 2.32957894e+02,
       2.21506355e+02, 2.09963559e+02, 1.98324832e+02, 1.86585498e+02,
       1.74740883e+02, 1.62799889e+02, 1.50825740e+02, 1.38895235e+02,
       1.27085175e+02, 1.15472361e+02, 1.04133592e+02, 9.31456699e+01,
       8.25853945e+01, 7.25295665e+01, 6.30549863e+01, 5.42384546e+01,
       4.61567719e+01, 3.88668020e+01, 3.23456635e+01, 2.65505380e+01,
       2.14386074e+01, 1.69670536e+01, 1.30930584e+01, 9.77380358e+00,
       6.96647102e+00, 4.62824255e+00, 2.71630000e+00, 1.18782521e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 2.38073083e-01, 4.04790721e-01, 5.08573743e-01,
       5.57842979e-01, 5.61019256e-01, 5.26523405e-01, 4.62776253e-01,
       3.78198630e-01, 2.81211364e-01, 1.80235284e-01, 8.36912202e-02,
       3.97373275e-17, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       5.00111462e-18, 1.86883307e-02, 3.25014447e-02, 4.18825436e-02,
       4.72748287e-02, 4.91215017e-02, 4.78657641e-02, 4.39508173e-02,
       3.78198630e-02, 2.99161025e-02, 2.06827376e-02, 1.05629695e-02,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]),  # [W/m^2] - Solar irradiance
    'absorptivity': 0.2,  # [-] - Absorptance of the battery
    'f_sr': 1,  # [-] - View factor for solar radiation
    'area_top': area_top,  # [m^2] - Top surface area of the battery

    'albedo': 0.4,  # [-] - Albedo of Mars

    'temperature_effective_mars': 209.8,  # [K] - Effective temperature for radiation of black body of Mars
    'emissivity_mars': 0.65,  # [-]-  Emissivity of Mars
    'stefan_boltzmann_constant': 5.6704e-8,  # [W/m^2*K^4] - Stefan-Boltzmann constant

        # battery properties
    'heat_rate_internal': 10,  # [W] - Heat from internal sources

    'coefficient_convection': 1,  # [W/m^2*K] - Convection coefficient
    'area_total': area_total,  # [m^2] - Total surface area of the battery
    'f_re': 1,  # [-] - View factor for emitted radiation
    'emissivity_battery': emissivity_battery,  # [-] - Emissivity of the battery
    'battery_mass': mass_battery,  # [kg] - Mass of the battery
    'battery_heat_capacity': capacity_battery,  # [J/kg*K] - Heat capacity of the battery

    # Insulator properties
    'thermal_conductivity': thermal_conductivity,  # [W/m*K] - Thermal conductivity of the insulator (Cork)
    'thickness_insulator': thickness_insulator,  # [m] - Thickness of the insulator
    'thermal_conductivity_air': thermal_conductivity_air,  # [W/m*K] - Thermal conductivity of the insulator (Cork)
    'thickness_insulator_air': thickness_insulator_air,  # [m] - Thickness of the insulator
}

class BatteryHeatTransfer:
    """
    This class models the heat transfer of the battery of the Martian battery.
    """

    def __init__(self):
        # Environmental properties
        heat_dictionary = heat_balance_mintemp
        self.temperature_atmosphere = heat_dictionary['temperature_atmosphere']  # [K] - Atmospheric temperature
        self.irradiance_sun = heat_dictionary['irradiance_sun']  # [W/m^2] - Solar irradiance
        self.absorptivity = heat_dictionary['absorptivity']  # [-] - Absorptance of the battery
        self.f_sr = heat_dictionary['f_sr']  # [-] - View factor for solar radiation
        self.area_top = heat_dictionary['area_top']  # [m^2] - Top surface area of the battery
        
        self.albedo = heat_dictionary['albedo']  # [-] - Albedo of Mars
        
        self.temperature_effective_mars = heat_dictionary['temperature_effective_mars']  # [K] - Effective temperature for radiation of black body of Mars
        self.emissivity_mars = heat_dictionary['emissivity_mars']  # [-]-  Emissivity of Mars
        self.stefan_boltzmann_constant = heat_dictionary['stefan_boltzmann_constant']  # [W/m^2*K^4] - Stefan-Boltzmann constant

        # battery properties
        self.heat_rate_internal = heat_dictionary['heat_rate_internal']  # [W] - Total heat from internal sources
        
        self.coefficient_convection = heat_dictionary['coefficient_convection']  # [W/m^2*K] - Convection coefficient
        self.area_total = heat_dictionary['area_total']  # [m^2] - Total surface area of the battery
        self.f_re = heat_dictionary['f_re']  # [-] - View factor for emitted radiation
        self.emissivity_battery = heat_dictionary['emissivity_battery']  # [-] - Emissivity of the battery
        self.battery_mass = heat_dictionary['battery_mass']  # [kg] - Mass of the battery
        self.battery_heat_capacity = heat_dictionary['battery_heat_capacity']  # [J/kg*K] - Heat capacity of the battery

        # Insulator properties
        self.thermal_conductivity_ins = heat_dictionary['thermal_conductivity']  # [W/m*K] - Thermal conductivity of the insulator (Cork)
        self.thickness_insulator_ins = heat_dictionary['thickness_insulator']  # [m] - Thickness of the insulator
        self.thermal_conductivity_air = heat_dictionary['thermal_conductivity_air']  # [W/m*K] - Thermal conductivity of the insulator (Cork)
        self.thickness_insulator_air = heat_dictionary['thickness_insulator_air']  # [m] - Thickness of the insulator

    
    def heat_rate_conduction(self, temperature_battery):
        """
        Calculates the heat input due to conduction from the ground to the battery.

        Args:
            temperature_battery: The current temperature of the battery [K].

        Returns:
            The heat input due to conduction [W].
        """
        thickness_insulator = self.thickness_insulator_ins+self.thickness_insulator_air
        thermal_insulator = thickness_insulator/(self.thickness_insulator_ins/self.thermal_conductivity_ins + self.thickness_insulator_air/self.thermal_conductivity_air)
        heat_rate_cond_ins = - thermal_insulator * self.area_total / thickness_insulator * (temperature_battery - self.temperature_atmosphere) 
        return heat_rate_cond_ins
    
    def heat_rate_external_input(self, temperature_battery):
        """
        Calculates the total heat input from external sources.

        Args:
            temperature_battery: The current temperature of the battery [K].

        Returns:
            A tuple containing the total heat input [W] and individual components [W].
        """

        heat_rate_sun = self.absorptivity * self.irradiance_sun * self.area_top * self.f_sr
        heat_rate_albedo = self.albedo * self.absorptivity * self.irradiance_sun * self.area_top * self.f_sr
        j_p = self.emissivity_mars * self.stefan_boltzmann_constant * self.temperature_effective_mars**4
        heat_rate_ir = j_p * self.area_top
        heat_rate_cond = self.heat_rate_conduction(temperature_battery)
        total_heat_rate_ext = heat_rate_sun + heat_rate_albedo + heat_rate_ir + heat_rate_cond
        return total_heat_rate_ext, (heat_rate_sun, heat_rate_albedo, heat_rate_ir, heat_rate_cond)

    def heat_rate_internal_input(self):
        """
        Calculates the total heat input from internal sources.

        Returns:
            The total heat input from electronics and motor [W].
        """

        return self.heat_rate_internal

    def heat_rate_convection(self, temperature_battery):
        """
        Calculates the heat loss due to convection with the atmosphere.

        Args:
            temperature_battery: The current temperature of the battery [K].

        Returns:
            The heat loss due to convection [W].
        """

        heat_rate_conv = self.coefficient_convection * (temperature_battery - self.temperature_atmosphere) * self.area_total
        return heat_rate_conv

    def heat_rate_out(self, temperature_battery):
        """
        Calculates the heat loss due to radiation to the environment.

        Args:
            temperature_battery: The current temperature of the battery [K].

        Returns:
            The heat loss due to radiation [W].
        """

        heat_rate_out = self.stefan_boltzmann_constant * self.emissivity_battery * (temperature_battery**4 - self.temperature_atmosphere**4) * self.area_total
        return heat_rate_out 

    def heat_rate_balance(self, temperature_battery):
        """
        Calculates the balance equation to solve for the battery's temperature.

        Args:
            temperature_battery: The current temperature of the battery [K].

        Returns:
            The value of the balance equation [W] (should be zero at equilibrium).
        """

        heat_rate_ext, _ = self.heat_rate_external_input(temperature_battery)
        heat_rate_int = self.heat_rate_internal_input()
        heat_rate_conv = self.heat_rate_convection(temperature_battery)
        heat_rate_out = self.heat_rate_out(temperature_battery)
        return heat_rate_ext + heat_rate_int - heat_rate_conv - heat_rate_out

    def temperature_time_derivative(self, t, temperature_battery, t_list):
        """
        Calculates the derivative of the temperature of the battery over time.

        Args:
            t: The current time [s].
            temperature_battery: The current temperature of the battery [K].

        Returns:
            The derivative of the temperature of the battery over time [K/s].
        """
        index = np.argmin(np.abs(t_list-t))
        temperature_derivative = (1/(self.battery_mass*self.battery_heat_capacity)*self.heat_rate_balance(temperature_battery))
        return temperature_derivative[index]

    def solve_temperature_time(self):
        """
        Solves the heat balance equation to find the temperature of the battery over time.

        Returns:
            The temperature of the battery over time [K] [s].
        """
        t = np.array([ 0.        ,  0.08333333,  0.16666667,  0.25      ,  0.33333333,
        0.41666667,  0.5       ,  0.58333333,  0.66666667,  0.75      ,
        0.83333333,  0.91666667,  1.        ,  1.08333333,  1.16666667,
        1.25      ,  1.33333333,  1.41666667,  1.5       ,  1.58333333,
        1.66666667,  1.75      ,  1.83333333,  1.91666667,  2.        ,
        2.08333333,  2.16666667,  2.25      ,  2.33333333,  2.41666667,
        2.5       ,  2.58333333,  2.66666667,  2.75      ,  2.83333333,
        2.91666667,  3.        ,  3.08333333,  3.16666667,  3.25      ,
        3.33333333,  3.41666667,  3.5       ,  3.58333333,  3.66666667,
        3.75      ,  3.83333333,  3.91666667,  4.        ,  4.08333333,
        4.16666667,  4.25      ,  4.33333333,  4.41666667,  4.5       ,
        4.58333333,  4.66666667,  4.75      ,  4.83333333,  4.91666667,
        5.        ,  5.08333333,  5.16666667,  5.25      ,  5.33333333,
        5.41666667,  5.5       ,  5.58333333,  5.66666667,  5.75      ,
        5.83333333,  5.91666667,  6.        ,  6.08333333,  6.16666667,
        6.25      ,  6.33333333,  6.41666667,  6.5       ,  6.58333333,
        6.66666667,  6.75      ,  6.83333333,  6.91666667,  7.        ,
        7.08333333,  7.16666667,  7.25      ,  7.33333333,  7.41666667,
        7.5       ,  7.58333333,  7.66666667,  7.75      ,  7.83333333,
        7.91666667,  8.        ,  8.08333333,  8.16666667,  8.25      ,
        8.33333333,  8.41666667,  8.5       ,  8.58333333,  8.66666667,
        8.75      ,  8.83333333,  8.91666667,  9.        ,  9.08333333,
        9.16666667,  9.25      ,  9.33333333,  9.41666667,  9.5       ,
        9.58333333,  9.66666667,  9.75      ,  9.83333333,  9.91666667,
       10.        , 10.08333333, 10.16666667, 10.25      , 10.33333333,
       10.41666667, 10.5       , 10.58333333, 10.66666667, 10.75      ,
       10.83333333, 10.91666667, 11.        , 11.08333333, 11.16666667,
       11.25      , 11.33333333, 11.41666667, 11.5       , 11.58333333,
       11.66666667, 11.75      , 11.83333333, 11.91666667, 12.        ,
       12.08333333, 12.16666667, 12.25      , 12.33333333, 12.41666667,
       12.5       , 12.58333333, 12.66666667, 12.75      , 12.83333333,
       12.91666667, 13.        , 13.08333333, 13.16666667, 13.25      ,
       13.33333333, 13.41666667, 13.5       , 13.58333333, 13.66666667,
       13.75      , 13.83333333, 13.91666667, 14.        , 14.08333333,
       14.16666667, 14.25      , 14.33333333, 14.41666667, 14.5       ,
       14.58333333, 14.66666667, 14.75      , 14.83333333, 14.91666667,
       15.        , 15.08333333, 15.16666667, 15.25      , 15.33333333,
       15.41666667, 15.5       , 15.58333333, 15.66666667, 15.75      ,
       15.83333333, 15.91666667, 16.        , 16.08333333, 16.16666667,
       16.25      , 16.33333333, 16.41666667, 16.5       , 16.58333333,
       16.66666667, 16.75      , 16.83333333, 16.91666667, 17.        ,
       17.08333333, 17.16666667, 17.25      , 17.33333333, 17.41666667,
       17.5       , 17.58333333, 17.66666667, 17.75      , 17.83333333,
       17.91666667, 18.        , 18.08333333, 18.16666667, 18.25      ,
       18.33333333, 18.41666667, 18.5       , 18.58333333, 18.66666667,
       18.75      , 18.83333333, 18.91666667, 19.        , 19.08333333,
       19.16666667, 19.25      , 19.33333333, 19.41666667, 19.5       ,
       19.58333333, 19.66666667, 19.75      , 19.83333333, 19.91666667,
       20.        , 20.08333333, 20.16666667, 20.25      , 20.33333333,
       20.41666667, 20.5       , 20.58333333, 20.66666667, 20.75      ,
       20.83333333, 20.91666667, 21.        , 21.08333333, 21.16666667,
       21.25      , 21.33333333, 21.41666667, 21.5       , 21.58333333,
       21.66666667, 21.75      , 21.83333333, 21.91666667, 22.        ,
       22.08333333, 22.16666667, 22.25      , 22.33333333, 22.41666667,
       22.5       , 22.58333333, 22.66666667, 22.75      , 22.83333333,
       22.91666667, 23.        , 23.08333333, 23.16666667, 23.25      ,
       23.33333333, 23.41666667, 23.5       , 23.58333333, 23.66666667,
       23.75      , 23.83333333, 23.91666667])

        t *= 3600
        y0 = np.array([260])
        temperature = solve_ivp(self.temperature_time_derivative, y0=y0, t_span=[t[0], t[-1]], t_eval=t, args=[t]).y.T
        temperature = solve_ivp(self.temperature_time_derivative, y0=temperature[-1], t_span=[t[0], t[-1]], t_eval=t, args=[t]).y.T
        return temperature, t
    
    def plot_temp_time(self):
        """
        Plots the temperature of the battery over time.
        """
        y, t = self.solve_temperature_time()
        t /= 3600
        min_x = t[np.argmin(y)]
        min_y = np.min(y)
        plt.scatter(min_x, min_y,c='r', label=f'minimum: {round(min_y,1)}K')
        max_x = t[np.argmax(y)]
        max_y = np.max(y)
        plt.scatter(max_x, max_y,c='r', label=f'maximum: {round(max_y,1)}K')
        plt.plot(t, y)
        plt.xlabel('Time [h]')
        plt.ylabel('Temperature [K]')
        plt.xlim([0, t[-1]])
        plt.xticks(np.arange(0, t[-1], 2))
        plt.legend()
        plt.show()
        pass



    def solve_equilibrium_temperature(self):
        """
        Solves the heat balance equation to find the equilibrium temperature 
        of the battery.

        Returns:
            The equilibrium temperature of the battery [K].
        """

        x = Symbol('x')
        temperature_equilibrium_solutions = solve(self.heat_rate_balance(x), x)
        return temperature_equilibrium_solutions[1]


def main1():
    battery = BatteryHeatTransfer()
    equilibrium_temp = battery.solve_equilibrium_temperature()
    print(f"Equilibrium temperature of the battery: {equilibrium_temp}")

def main2():
    battery = BatteryHeatTransfer()
    equilibrium_temp = battery.plot_temp_time()

if __name__ == "__main__":
    main2()
